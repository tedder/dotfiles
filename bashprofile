# 2.0 gpg-agent, 1.1 dirmngr: #export PATH="/usr/local/opt/gpg-agent/bin:/usr/local/opt/dirmngr/bin:
export PATH="$HOME/.okta/bin/:$HOME/git/dotfiles/bin:/usr/local/bin:/usr/local/sbin:/bin:/usr/bin:~/git/stansonhealth/provisioning/files/helpers:/usr/local/opt/qt@5.5/bin:/usr/local/opt/qt/bin:/usr/sbin:/sbin:/opt/X11/bin:/Users/ted/Library/Python/3.7/bin:$PATH"
export BASH_SILENCE_DEPRECATION_WARNING=1


function okta_hello() {
  echo "core"
  OKTA_AWS_ROLE_TO_ASSUME="arn:aws:iam::669843297275:role/Full-Administrator" \
  okta-aws sigsci_core sts get-caller-identity

  echo "jump"
  OKTA_AWS_ROLE_TO_ASSUME="arn:aws:iam::827012779870:role/Full-Administrator" \
  okta-aws sigsci_jump sts get-caller-identity

  echo "prod"
  OKTA_AWS_ROLE_TO_ASSUME="arn:aws:iam::803688608479:role/Full-Administrator" \
  okta-aws sigsci_prod sts get-caller-identity

  echo "dev"
  OKTA_AWS_ROLE_TO_ASSUME="arn:aws:iam::021874968854:role/Full-Administrator" \
  okta-aws sigsci_dev sts get-caller-identity
}

. ~/.okta/bash_functions

# "Remember to add "use-standard-socket" to your ~/.gnupg/gpg-agent.conf"
#if [[ ! `pgrep gpg-agent` ]] || [[ ! -f "${HOME}/.gpg-agent-info" ]]; then
  #echo "starting gpg"
  #gpg-agent --daemon --enable-ssh-support --write-env-file "${HOME}/.gpg-agent-info" --quiet
  #echo "done."
#fi

echo "sourcing gpg"
##. "${HOME}/.gpg-agent-info"
#. ~/.gpg-agent-info && export GPG_AGENT_INFO && export SSH_AUTH_SOCK && export SSH_AGENT_PID
#echo "done"
##export GPG_AGENT_INFO
##export SSH_AUTH_SOCK

export CLICOLOR=1
export HOMEBREW_GITHUB_API_TOKEN="`cat ${HOME}/Dropbox/ted-geek/brew-github-key.txt`"

export GOPATH=$HOME/git/go
#export PYTHONPATH=/usr/local/lib/python2.7/site-packages
#export DOCKER_HOST=tcp://localhost:4243
#export AWS_DATA_PATH="/usr/local/lib/python2.7/site-packages/botocore/data/"
export BOTO_CONFIG="~/.aws/config"

# needed for grails, otherwise it goes to java6 that doesn't have nio.filewhatever, so asset-pipeline fails
export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_71.jdk/Contents/Home
export GRAILS_OPTS="-XX:PermSize=128m -XX:MaxPermSize=1g"

# node, nvm, npm
export NVM_DIR=~/.nvm
. $(brew --prefix nvm)/nvm.sh

# init docker
#echo "docker"
#eval $(docker-machine env)
#echo "done-"

#alias tower="ssh -i ~/.ssh/stanson-aws.pem -N -L 1613:localhost:443 ubuntu@tower.ssh.stansonhealth.com"
#alias vash="mosh --ssh='ssh -o IdentityFile=/Users/ted/.vagrant.d/insecure_private_key -o StrictHostKeyChecking=no -p 2222' vagrant@127.0.0.1"
#alias gocd="ssh -i ~/.ssh/stanson-aws.pem -N -L 8153:localhost:8153 ubuntu@gocd.ssh.stansonhealth.com"
alias lsusb='system_profiler SPUSBDataType'
alias docker2='dlite'
alias fix_sd_card_permissions='chflags nouchg '
alias tar=/usr/local/bin/tar
alias disable_app_translocation='xattr -r -d com.apple.quarantine '
alias parsec='parsecd app_daemon=1'

OS="NOPE"
[ -f /etc/os-release ] && OS=$(awk -F= '/^NAME/{print $2}' /etc/os-release)
#echo $OS
if [[ $OS == *"Ubuntu"* ]]; then

  alias twtxt="python3 ~/git/twtxt/twtxt/cli.py"
  alias aprs='python -c "import sys,aprslib,json;a=aprslib.parse(sys.argv[1]);print(json.dumps(a,indent=2));print(\"http://www.openstreetmap.org/index.html?lat={0}&lon={1}&mlat={0}&mlon={1}&zoom=16\".format(a[\"latitude\"],a[\"longitude\"]))"'
  alias df='df -x"squashfs" -x"tmpfs" --output="source,fstype,size,used,avail,pcent,target,itotal,iused,ipcent"'
  alias pbcopy='xclip -selection clipboard'
  alias pbpaste='xclip -selection clipboard -o'
fi

[ -f /usr/local/etc/bash_completion ] && . /usr/local/etc/bash_completion

#source /usr/local/share/chruby/chruby.sh

# via: http://unix.stackexchange.com/a/1292/42232
# http://askubuntu.com/a/566536/69983
# avoid duplicates..
export HISTCONTROL=ignoredups:erasedups:erasedups
# append history entries..
shopt -s histappend

# cargoculting on this term
export HISTFILESIZE=100000
export HISTSIZE=100000

#export DOCKER_HOST=tcp://192.168.59.103:2376
##export DOCKER_CERT_PATH=/Users/ted/.boot2docker/certs/boot2docker-vm
#export DOCKER_TLS_VERIFY=1

export PS1="\h:\W \u\$ "

# pip bash completion start
_pip_completion()
{
    COMPREPLY=( $( COMP_WORDS="${COMP_WORDS[*]}" \
                   COMP_CWORD=$COMP_CWORD \
                   PIP_AUTO_COMPLETE=1 $1 ) )
}
complete -o default -F _pip_completion pip
# pip bash completion end

alias tf="terraform"
alias tffmt="terraform fmt -diff=true"
export GREP_OPTIONS='--exclude-dir=.terraform'

source ~/.bash_sigsci

